package com.kithvin.alumni.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VolunteerOPAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVolunteerOPAllPropertiesEquals(VolunteerOP expected, VolunteerOP actual) {
        assertVolunteerOPAutoGeneratedPropertiesEquals(expected, actual);
        assertVolunteerOPAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVolunteerOPAllUpdatablePropertiesEquals(VolunteerOP expected, VolunteerOP actual) {
        assertVolunteerOPUpdatableFieldsEquals(expected, actual);
        assertVolunteerOPUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVolunteerOPAutoGeneratedPropertiesEquals(VolunteerOP expected, VolunteerOP actual) {
        assertThat(expected)
            .as("Verify VolunteerOP auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVolunteerOPUpdatableFieldsEquals(VolunteerOP expected, VolunteerOP actual) {
        assertThat(expected)
            .as("Verify VolunteerOP relevant properties")
            .satisfies(e -> assertThat(e.getVolunteerName()).as("check volunteerName").isEqualTo(actual.getVolunteerName()))
            .satisfies(e -> assertThat(e.getDateAndTime()).as("check dateAndTime").isEqualTo(actual.getDateAndTime()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getTimeDuration()).as("check timeDuration").isEqualTo(actual.getTimeDuration()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getMember()).as("check member").isEqualTo(actual.getMember()))
            .satisfies(
                e ->
                    assertThat(e.getVolunteerOpCoordinator())
                        .as("check volunteerOpCoordinator")
                        .isEqualTo(actual.getVolunteerOpCoordinator())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVolunteerOPUpdatableRelationshipsEquals(VolunteerOP expected, VolunteerOP actual) {}
}
