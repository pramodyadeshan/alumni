package com.kithvin.alumni.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EventAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAllPropertiesEquals(Event expected, Event actual) {
        assertEventAutoGeneratedPropertiesEquals(expected, actual);
        assertEventAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAllUpdatablePropertiesEquals(Event expected, Event actual) {
        assertEventUpdatableFieldsEquals(expected, actual);
        assertEventUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventAutoGeneratedPropertiesEquals(Event expected, Event actual) {
        assertThat(expected)
            .as("Verify Event auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventUpdatableFieldsEquals(Event expected, Event actual) {
        assertThat(expected)
            .as("Verify Event relevant properties")
            .satisfies(e -> assertThat(e.getEventName()).as("check eventName").isEqualTo(actual.getEventName()))
            .satisfies(e -> assertThat(e.getDateAndTime()).as("check dateAndTime").isEqualTo(actual.getDateAndTime()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getEventType()).as("check eventType").isEqualTo(actual.getEventType()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getTargetAudience()).as("check targetAudience").isEqualTo(actual.getTargetAudience()))
            .satisfies(e -> assertThat(e.getEventCoordinator()).as("check eventCoordinator").isEqualTo(actual.getEventCoordinator()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEventUpdatableRelationshipsEquals(Event expected, Event actual) {}
}
